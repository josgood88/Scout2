using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Library;
using Library.Database;
using Scout2.Utility;

namespace Scout2.IndividualReport {
   public class CreateIndividualReport : Scout2.IndividualReport.PreviousReport {
      // Create a Bill Report, given a bill identifier such as AB12
      public static List<string> ReportContents(BillRow row, string path) {
         LogThis("Scout2.IndividualReport.CreateIndividualReport.ReportContents");
         string name_ext = Path.GetFileName(row.Lob);                   // BillVersionTable bill_xml is unique
         BillVersionRow bv_row = GlobalData.VersionTable.Scalar(name_ext);
         List<BillHistoryRow> history = GlobalData.HistoryTable.RowSet(bv_row.BillID);
         var location_code = history.First().TernaryLocation;
         var location_code_row = GlobalData.LocationTable.Scalar(location_code);

         string appropriation = bv_row.Appropriation;
         string author        = row.Author;
         string bill_id       = row.Bill;
         string fiscal        = bv_row.FiscalCommittee;
         string house         = history.First().PrimaryLocation;
         string last_action   = FindLastAction(row);
         string location      = location_code_row == null ? BillUtils.WhenNullLocationCode(history) : location_code_row.Description;
         string local_pgm     = bv_row.LocalProgram;
         string number        = row.MeasureNum.TrimStart('0');
         string title         = row.Title;
         string type_house    = $"{bill_id.First()}B";
         string vers_id       = row.BillVersionID;
         string vote          = bv_row.VoteRequired;

         // These data come from the previous version of the bill report
         // When creating a report for the first time, there is no previous report.
         // When regenerating a report, there is a previous report.
         var summary = new List<string>();
         var position = new List<string>();
         var shortsummary = string.Empty;
         var committees = string.Empty;
         var likelihood = string.Empty;
         if (CommonUtils.IsNullOrEmptyOrWhiteSpace(path)) {
            // do nothing
         } else {
            summary = Summary(path);
            position = Position(path);
            shortsummary = ShortSummary(path);
            committees = Committees(path);
            likelihood = Likelihood(path);
         }

         // With all necessary data obtained, generate the report file template.  This sets things up for entering the report manually.
         var result = BeginIndividualReport(type_house, number,author, title);

         // Review
         if (summary.Count > 0) {
            foreach (var line in summary) result.Add(line);
         } else {
            result.Add("<p>");
            result.Add($"<b>Summary</b>: (Reviewed {DateTime.Now.ToShortDateString()})");
            // TODO find subsequent reviews shown in previous report and echo them here
            // TODO make it clear whether new/updated reports are generated by the same method
            result.Add("   <br /> (Quotations taken directly from the bill's language, or from current code)");
            result.Add("   <br />");
            result.Add("   <br /> This is my review");
            result.Add("</p>");
         }

         // Position
         result.AddRange(ReportPosition(position));

         // Short Summary, Committees and Likelihood
		   result.AddRange(ReportSummaryPredictLikelihood(shortsummary, committees, likelihood));

         // Status, Location, etc
         result.AddRange(ReportStatusLocationEtc(location, last_action, vote, appropriation, fiscal, local_pgm, history));

         // Bill History
		 result.AddRange(ReportHistory(history));
         return result;
      }
   }
}
